function drawScoreCards()
  for i, color in ipairs(getSeatedPlayers()) do
    if state.players[color] ~= nil then
      drawCompletedRounds(state.players[color], color)
      drawCurrentRound(state.players[color], color)
    end
  end
end

function drawCurrentRound(player, color)
  if state.rolling or state.turn.color ~= color or state.turn.rolls == 0 then return end
  local card = player.scoreCard
  local i = state.round
  local rowDistance = 0.63
  local round = player.scores[i]
  local buttonColor = i < state.round and {0.7, 0.7, 0.7} or {0.5, 0.5, 1}

  currentRoundLockButton(card, round, 'aces', 1, buttonColor)
  currentRoundLockButton(card, round, 'twos', 2, buttonColor)
  currentRoundLockButton(card, round, 'threes', 3, buttonColor)
  currentRoundLockButton(card, round, 'fours', 4, buttonColor)
  currentRoundLockButton(card, round, 'fives', 5, buttonColor)
  currentRoundLockButton(card, round, 'sixes', 6, buttonColor)

  local top = 0.05
  local rowDistance = 0.62
  currentRoundLockButton(card, round, 'threeOfKind', 10, buttonColor)
  currentRoundLockButton(card, round, 'fourOfKind', 11, buttonColor)
  currentRoundLockButton(card, round, 'fullHouse', 12, buttonColor)
  currentRoundLockButton(card, round, 'smallStraight', 13, buttonColor)
  currentRoundLockButton(card, round, 'largeStraight', 14, buttonColor)
  currentRoundLockButton(card, round, 'yahtzee', 15, buttonColor)
  currentRoundLockButton(card, round, 'chance', 16, buttonColor)
end

function currentRoundLockButton(card, round, name, x, color)
  local alt = fieldNames[name]

  local value = _G[name .. 'Score']()
  if ((round[name] == nil or (name == 'yahtzee' and value ~= round[name])) and value > 0) then
    lockScoreButton(card, name .. 'FieldLock', value, x, state.round, colors.green, function(options)
      options.tooltip = value .. ' for ' .. alt
      options.font_color = Color.fromHex('0e3e14')
      return options
    end)
  elseif round[name] == nil and value == 0 then
    lockScoreButton(card, name .. 'FieldLock', value, x, state.round, colors.red, function(options)
      options.tooltip = value .. ' for ' .. alt
      options.font_color = Color.fromHex('800600')
      return options
    end)
  end
end

function RewriteNotes()
  local notes = {}
  if state.round == 0 then
    return nil
  end

  for color, player in pairs(state.players) do
    local total = topTotal(color, state.round)
    local bonus = total > 62 and 35 or 0
    local bottom = bottomTotal(color, state.round)
    local round = total + bonus + bottom
    local hex = hexMap[color]
    local name = Player[color] and Player[color].steam_name or color

    table.insert(notes, '[' .. hex .. ']' .. name ..
      '[aaaaaa]: Upper([' .. hex .. ']' .. total ..
      '[aaaaaa])\nBonus([' .. hex .. ']' .. bonus ..
      '[aaaaaa])\nLower([' .. hex .. ']' .. bottom ..
      '[aaaaaa])\nGrand Total([' .. hex .. ']' .. round ..
      '[aaaaaa])')
  end

  setNotes(table.concat(notes, "\n\n"))
end

function drawCompletedRounds(player, color)
  local card = player.scoreCard
  local bounds = player.scoreCard.getBounds()

  -- Draw name first
  textButton(card, Player[color].steam_name, -1, -1, nil, function(data)
    data.click_function = 'noop'
    return data
  end)

  -- Draw round pointer
  textButton(card, '▼', -0.5, state.round, colors.black, function(options)
    options.font_size = 300
    return options
  end)

  local i = 1
  while i <= state.round do
    local round = player.scores[i]
    local buttonColor = i == state.round and {1, 1, 1} or {1,1,1, 0.75}
    local totalButtonColor = i == state.round and {0.95, 1, 0.95} or {0.95, 1, 0.95, 0.75}

    -- Top
    if i < state.round or round['aces'] ~= nil then textButton(card, RealScore(color, 'aces', i), 1, i) end
    if i < state.round or round['twos'] ~= nil then textButton(card, RealScore(color, 'twos', i), 2, i) end
    if i < state.round or round['threes'] ~= nil then textButton(card, RealScore(color, 'threes', i), 3, i) end
    if i < state.round or round['fours'] ~= nil then textButton(card, RealScore(color, 'fours', i), 4, i) end
    if i < state.round or round['fives'] ~= nil then textButton(card, RealScore(color, 'fives', i), 5, i) end
    if i < state.round or round['sixes'] ~= nil then textButton(card, RealScore(color, 'sixes', i), 6, i) end

    local topTotal = topTotal(color, i)
    textButton(card, topTotal, 7, i)

    if topTotal > 62 then
      textButton(card, '✓', 8, i, colors.olive)
    end

    local realTotal = topTotal + (topTotal > 62 and 35 or 0)
    textButton(card, realTotal, 9, i)

    -- Bottom
    local hasYahtzee = state.turn.rolls > 0 and yahtzeeScore() ~= RealScore(color, 'yahtzee', i)
    if i < state.round or round['threeOfKind'] ~= nil then textButton(card, RealScore(color, 'threeOfKind', i), 10, i) end
    if i < state.round or round['fourOfKind'] ~= nil then textButton(card, RealScore(color, 'fourOfKind', i), 11, i) end
    if i < state.round or round['fullHouse'] ~= nil then textButton(card, RealScore(color, 'fullHouse', i), 12, i) end
    if i < state.round or round['smallStraight'] ~= nil then textButton(card, RealScore(color, 'smallStraight', i), 13, i) end
    if i < state.round or round['largeStraight'] ~= nil then textButton(card, RealScore(color, 'largeStraight', i), 14, i) end

    if hasYahtzee == false or state.turn.color ~= color then
      if i < state.round or round['yahtzee'] ~= nil then textButton(card, RealScore(color, 'yahtzee', i), 15, i) end
    end
    if i < state.round or round['chance'] ~= nil then textButton(card, RealScore(color, 'chance', i), 16, i) end

    local bottomTotal = bottomTotal(color, i)
    textButton(card, bottomTotal, 17, i)
    textButton(card, realTotal, 18, i)
    textButton(card, realTotal + bottomTotal, 19, i)

    i = i + 1
  end
end

function Redraw()
  self.clearButtons()
  self.clearInputs()
  RewriteNotes()

  for i, obj in pairs(state.bags) do
    obj.clearButtons()
    obj.clearInputs()
  end

  for i, obj in ipairs(state.dice) do
    obj.clearButtons()
    obj.clearInputs()
  end

  for i, player in pairs(state.players) do
    if player.scoreCard then
      player.scoreCard.clearButtons()
      player.scoreCard.clearInputs()
    end
  end

  local bagPosition = getObjectFromGUID(roundBag).getBounds()

  if state.rolling == false then
    state.bags.cards.createButton({
      click_function = 'resetButtonPress',
      function_owner = self,
      label = 'Restart Game',
      width = 1000,
      height = 1000,
      position = {0, 0.1, -3},
      rotation = {0, 180, 0},
      color = colors.red
    })
  end
  if state.round > 0 and state.round < 7 then
    drawScoreCards()

    if state.turn.rolls < 3 and state.hideRoll == false and state.rolling == false then
      local next = Turns.enable == true and Player[Turns.turn_color].steam_name .. "'s turn\nClick to Roll" or 'Next Turn'
      state.bags.dice.createButton({
        click_function = 'rollDice',
        function_owner = self,
        label          = state.turn.rolls == 0 and next or state.turn.rolls < 3 and 'Roll #' .. (state.turn.rolls + 1),
        position       = relativeVector(state.bags.dice, vector(10, 1.5, 0)),
        scale          = { 2, 0, 2 },
        width          = 1000,
        height         = 300,
        color          = Turns.enable and Turns.turn_color or colors.olive,
        font_color     = Turns.enable and (Turns.turn_color == 'White' or Turns.turn_color == 'Yellow') and colors.black or colors.white
      })
    end

    if state.rolling == false and state.turn.rolls > 0 then
      each(state.dice, function(dice, idx)
        if state.keep[idx] == false then
          local bounds = dice.getBounds()
          local r = dice.getRotation()
          local p = dicePosition(idx)
          state.bags.dice.createButton({
            click_function = 'lockDice' .. idx,
            function_owner = self,
            label          = 'Keep',
            position       = relativeVector(state.bags.dice, vector((idx - 3) * 3, 1.5, -2)),
            scale          = { 2, 0, 2 },
            width          = 300,
            height         = 300,
            color          = toPerc{ 17, 17, 17 },
            font_color     = {1,1,1}
          })
        end
      end)

      if state.turn.rolls < 3 then
        each(state.keep, function(keep, idx)
          if keep == true then
            local dice = state.dice[idx]
            local bounds = dice.getBounds()
            local r = dice.getRotation()
            local p = dicePosition(idx)

            state.bags.dice.createButton({
              click_function = 'rejectDice' .. idx,
              function_owner = self,
              label          = 'Give Back',
              position       = relativeVector(state.bags.dice, vector((idx - 3) * 3, 1.5, 0)),
              scale          = { 2, 0, 2 },
              width          = 500,
              height         = 300,
              color          = colors.red,
            })
          end
        end)
      end
    end
  end
end

function scoreButtonPosition(round, row)
  return themes[state.theme].buttonPosition(round, row)
end

function scoreButton(card, title, row, round, color, callback)
  local pos = scoreButtonPosition(round, row)
  local config = {
    font_size      = 250,
    click_function = 'noop',
    function_owner = self,
    label          = title,
    position       = pos,
    width          = 500,
    height         = 300,
    color          = color ~= nil and color or 'White',
    hover_color    = color ~= nil and color or 'White',
    press_color    = color ~= nil and color or 'White',
  }

  if (callback ~= nil) then
    config = callback(config)
  end

  card.createButton(config)
end

function textButton(card, title, y, round, color, callback)
  return scoreButton(card, title, y, round, {0,0,0}, function(options)
    options.width = 0
    options.height = 0
    options.fontSize = 250

    if color ~= nil then
      options.font_color = color
    else
      options.font_color = colors.black
    end

    if callback ~= nil then
      return callback(options)
    end

    return options
  end)
end

function lockScoreButton(card, onclick, title, y, round, color, callback)
  return scoreButton(card, title, y, round, color, function(data)
    if round == state.round then
      data.click_function = onclick
    end

    if callback ~= nil then
      return callback(data)
    end

    return data
  end)
end

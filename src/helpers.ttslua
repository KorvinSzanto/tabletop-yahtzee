-- Prepare to declare tests
_tests = _tests ~= nil and _tests or {}

function reset()
  state = defaultState()
  loadItems()
  loadPlayers()

  Redraw()
  Start()
end

function Color.fromHex(hexColor)
    local rStr, gStr, bStr = hexColor:match('#?(%x%x)(%x%x)(%x%x)')
    assert(rStr and gStr and bStr, tostring(hexColor) .. ' is not a valid color hex string')
    return Color(tonumber(rStr, 16)/255, tonumber(gStr, 16)/255, tonumber(bStr, 16)/255)
end

function toPerc(table) if type(table) == 'number' then return table / 255 end for i, val in pairs(table) do table[i] = val / 255 end return table end

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
      if type(orig) == 'userdata' and orig.guid ~= nil then
        copy = 'GUID::' .. orig.guid
      else
        copy = orig
      end
    end
    return copy
end

function inflate(table)
  for key, value in next, table, nil do
    local valueType = type(value)
    if valueType == 'string' and string.find(value, 'GUID::') ~= 0 then
      table[key] = getObjectFromGUID(string.sub(value, 7))
    elseif valueType == 'table' then
      inflate(value)
    end
  end
end

function destroyObjectsByTag(tag)
  tag = string.lower(tag)
  for i, obj in ipairs(getAllObjects()) do
    if string.lower(obj.tag) == tag then
      destroyObject(obj)
    end
  end
end

function destroyObjectsByName(tag)
  tag = string.lower(tag)
  for i, obj in ipairs(getAllObjects()) do
    if string.lower(obj.name) == tag then
      destroyObject(obj)
    end
  end
end

function relativeVector(bag, position)
  local realPosition = bag.positionToLocal(position)
  realPosition.x = -1 * realPosition.x
  return realPosition
end

_tests.testRelativeVector = function()
  local testBag = { positionToLocal = function(position) return vector(10, 5, 3) end }

  _tests.assertEquals(vector(-10, 5, 3), relativeVector(testBag, vector(1, 1, 1)))
end

function noop() end

-- Iterate over a table with a callback function
-- callback function(val, index)
function each(table, callback)
  for i, o in pairs(table) do
    callback(o, i)
  end
end
function ieach(table, callback)
  for i, o in ipairs(table) do
    callback(o, i)
  end
end

_tests.testEachIteratesArray = function()
  local count = 0
  local last = nil
  each({'a','b','c','d','e'}, function(val, index)
    count = count + 1
    last = val
    lastIndex = index
  end)
  _tests.assertEquals(5, count)
  _tests.assertEquals(5, lastIndex)
  _tests.assertEquals('e', last)
end

_tests.testEachIteratesAssociative = function()
  local count = 0
  local last = nil
  each({foo = 'a', baz = 'b', bar = 'c'}, function(val, index)
    count = count + 1
    last = val
    lastIndex = index
  end)
  _tests.assertEquals(3, count)
  _tests.assertEquals('bar', lastIndex)
  _tests.assertEquals('c', last)
end

function defer(callback)
  deferFunc(callback)()
end

function deferFunc(callback)
  return function() Wait.frames(callback, 10) end
end

function whenResting(obj, callback)
  defer(function() Wait.condition(deferFunc(callback), function() return obj.resting end) end)
end

function whenDiceResting(callback)
  defer(function() Wait.condition(deferFunc(callback), function()
    return state.dice[1].resting and state.dice[2].resting and
      state.dice[3].resting and state.dice[4].resting and
      state.dice[5].resting
  end) end)
end

function times5(callback, thenCallback)
  callback()
  local frames = 30
  Wait.frames(function()
    callback()
    Wait.frames(function()
      callback()
      Wait.frames(function()
        callback()
        Wait.frames(function()
          callback()
          if thenCallback ~= nil then
            defer(thenCallback)
          end
        end, frames)
      end, frames)
    end, frames)
  end, frames)
end

function normalizeRotation(degrees, snapAngle)
  if snapAngle == nil then
    snapAngle = 90
  end

  return (math.floor(degrees / snapAngle + 0.5) * snapAngle) % 360
end

_tests.testNormalizeRotation = function()
  _tests.assert(function() return normalizeRotation(1) == 0 end)
  _tests.assert(function() return normalizeRotation(46) == 90 end)
  _tests.assert(function() return normalizeRotation(91) == 90 end)
  _tests.assert(function() return normalizeRotation(185) == 180 end)
  _tests.assert(function() return normalizeRotation(361) == 0 end)
  _tests.assert(function() return normalizeRotation(300) == 270 end)
  _tests.assert(function() return normalizeRotation(320) == 0 end)
end

function lockObjects()
  each(getAllObjects(), function(obj)
    obj.setLock(true)
    obj.interactable = false
    local rotation = obj.getRotation()
    obj.setRotation({
      normalizeRotation(rotation.x, 45),
      normalizeRotation(rotation.y, 45),
      normalizeRotation(rotation.z, 45),
    })
  end)
end

function statePlayer(color)
  local realPlayer = state.players[color]

  if realPlayer == nil then
    return {
      scores = {
        {},
        {},
        {},
        {},
        {},
        {},
        {}
      },
      rolls = 0
    }
  end

  return realPlayer
end

function Round()
  return state.round
end

function Host()
  return player(state.host)
end

function zeroize(value)
  return value == nil and 0 or value
end

function getCardPosition(color)
  local transform = Player[color].getHandTransform()
  local position = transform.position
  local rotation = transform.rotation
  local offset = 8.5
  rotation.y = normalizeRotation(rotation.y)
  position.y = 1.52

  if rotation.y == 0 then
    position.z = position.z + offset
  elseif rotation.y == 90 then
    position.x = position.x + offset
  elseif rotation.y == 180 then
    position.z = position.z - offset
  elseif rotation.y == 270 then
    position.x = position.x - offset
  end

  return position
end

function determineWinner()
  local winners = {}
  local score = -1

  for color, player in pairs(state.players) do
    local topTotal = topTotal(color, state.round)
    local realTotal = topTotal + (topTotal > 62 and 35 or 0)
    local bottomTotal = bottomTotal(color, state.round)
    local totalScore = realTotal + bottomTotal

    if score < totalScore then
      score = totalScore
      winners = {}
      table.insert(winners, color)
    elseif score == totalScore then
      table.insert(winners, color)
    end
  end

  return winners
end

function hasRemainingTurns()
  local turns = 0
  for color, player in pairs(state.players) do
    if player.rolls < 13 then
      return true
    end
  end

  return false
end

function broadcastYahtzee()
  times5(function()
    broadcastToAll('Yahtzee!!!', state.turn.color)
  end)
end

local canReset = true
function resetButtonPress(o, color)
  if Player[color].admin ~= true then
    broadcastToColor('Only the host can restart the game!', color, colors.red)
    return nil
  end
  if state.rolling == true then
    broadcastToColor("You can't reset while rolling!", color, colors.red)
    return nil
  end
  if canReset == false then
    return nil
  end

  canReset = false
  Wait.time(function() canReset = true end, 1)
  reset()
end

function loadItems()
  state.bags.dice = getObjectFromGUID(diceBag)
  state.bags.cards = getObjectFromGUID(roundBag)

  state.bags.dice.setColorTint('Brown')
  state.bags.cards.setColorTint('Brown')

  loadDice()
end

function loadDice()
  -- Delete existing dice
  destroyObjectsByTag('Dice')

  -- load in more dice
  local idx = 1
  while idx < 6 do
    local i = idx
    defer(function()
      state.dice[i] = state.bags.dice.takeObject({
        position = dicePosition(i),
        rotation = {45, 0, 45},
        smooth = false,
        callback_function = function(obj)
          obj.interactable = false
          obj.setLock(true)
        end
      })
    end)
    idx = idx + 1
  end
end

function loadPlayers()
  -- Delete existing dice
  destroyObjectsByName('custom_board')

  state.players = {}
  state.playerCount = 0

  for i, player in ipairs(getSeatedPlayers()) do
    if (Player[player].admin == true) then
      state.host = player
    end

    state.playerCount = state.playerCount + 1
    local scorePosition = getCardPosition(player)
    local scoreRotation = {
      0,
      normalizeRotation(180 + Player[player].getHandTransform().rotation.y),
      0,
    }

    state.players[player] = {
      rolls = 0,
      scores = {},
    }

    state.players[player].scoreCard = state.bags.cards.takeObject({
      scale = 1,
      position = scorePosition,
      rotation = scoreRotation,
      smooth = false,
      callback_function = function(obj)
        obj.interactable = false
        obj.setLock(true)
        obj.setName('Scorecard')
        obj.setPosition(scorePosition)
        obj.setRotation(scoreRotation)
        obj.setColorTint(player)
      end
    })

    for i=1,6 do
      state.players[player].scores[i] = {
        aces = nil,
        twos = nil,
        threes = nil,
        fours = nil,
        fives = nil,
        sixes = nil,
        threeOfKind = nil,
        fourOfKind = nil,
        fullHouse = nil,
        smallStraight = nil,
        largeStraight = nil,
        yahtzee = nil,
      }
    end
  end
end

function Start(o, color)
  state.round = 1

  local allPlayers = {}
  local count = 0
  for idx, color in pairs(getSeatedPlayers()) do
    allPlayers[#allPlayers + 1] = color
    count = count + 1
  end

  if count > 1 then
    local randomPlayer = allPlayers[math.random(#allPlayers)]
    state.turn.color = randomPlayer
    Turns.turn_color = randomPlayer
    broadcastToAll('Randomly selected ' .. Player[randomPlayer].steam_name .. ' to go first', randomPlayer)
    if Turns.enable == false then
      Turns.enable = true
    end
  end
  Redraw()
end
